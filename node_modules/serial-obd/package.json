{
  "name": "serial-obd",
  "version": "0.1.0",
  "description": "Package for communicating with a serial/usb OBD-II reader.",
  "author": {
    "name": "Eric Smekens",
    "email": "ericsmekens@msn.com",
    "url": "http://github.com/EricSmekens"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com:EricSmekens/node-serial-obd.git"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/obd.js",
  "dependencies": {
    "serialport": "1.1.0"
  },
  "devDependencies": {},
  "engines": {
    "node": ">= 0.8.x",
    "npm": ">= 1.1.x"
  },
  "scripts": {
    "install": ""
  },
  "keywords": [
    "OBD",
    "car",
    "serial",
    "ecu"
  ],
  "license": "Apache-2.0",
  "readme": "serial-obd 0.1.0\n===============\n\n# Serial communication for OBD-II ELM327 devices.\nThis node module lets you communicate over a serial port with OBD-II ELM327 Connectors using Node.js.\n# Limitations\n* Only tested on Ubuntu\n* Only tested with rfcomm, and not with actual serial port yet.\n* Only tested on ELM327 devices.\n* Not all OBD-II Commands are implemented yet.\n\n## Use bluetooth-obd if you use a bluetooth OBD-II Connector!\n\n# Pre-requests\n* If it's a Bluetooth ELM327, then it should already be paired and connected with rfcomm connect!\n* You might need to run it with SUDO! (If it says: serial port X is not ready!\n\n# Install\n`npm install node-serial-obd`\n# Documentation\n\n## Basic usage\n\n```javascript\nvar OBDReader = require('serial-obd');\nvar options = {};\noptions.baudrate = 115200;\nvar serialOBDReader = new OBDReader(\"/dev/rfcomm0\", options);\nvar dataReceivedMarker = {};\n\nserialOBDReader.on('dataReceived', function (data) {\n    console.log(data);\n    dataReceivedMarker = data;\n});\n\nserialOBDReader.on('connected', function (data) {\n    this.addPoller(\"vss\");\n    this.addPoller(\"rpm\");\n    this.addPoller(\"temp\");\n    this.addPoller(\"load_pct\");\n    this.addPoller(\"map\");\n    this.addPoller(\"frp\");\n\n    this.startPolling(2000); //Polls all added pollers each 2000 ms.\n});\n\nserialOBDReader.connect();\n```\n## API\n\n###OBDReader\n\n#### Event: ('dataReceived', data)\n\nEmitted when data is read from the OBD-II connector.\n\n* data - the data that was read and parsed to a reply object\n\n#### Event: ('connected')\n\nEmitted when the connection is set up (port is open).\n\n* data - the data that was read and parsed to a reply object\n\n#### OBDReader(portName, options)\n\nCreates an instance of OBDReader.\n\n##### Params:\n\n* **string** *portName* Port that will be connected to. For example: &quot;/dev/rfcomm0&quot;\n\n* **Object** *options* Object that contains options, e.g.: baudrate, databits, stopbits, flowcontrol. Same options serialport module uses.\n\n#### getPIDByName(Name)\n\nFind a PID-value by name.\n\n##### Params: \n\n* **name** *Name* of the PID you want the hexadecimal (in ASCII text) value of.\n\n##### Return:\n\n* **string** PID in hexadecimal ASCII\n\n#### parseOBDCommand(hexString)\n\nParses a hexadecimal string to a reply object. Uses PIDS. (obdInfo.js)\n\n##### Params: \n\n* **string** *hexString* Hexadecimal value in string that is received over the serialport.\n\n##### Return:\n\n* **Object** reply - The reply.\n\n* **string** reply.value - The value that is already converted. This can be a PID converted answer or &quot;OK&quot; or &quot;NO DATA&quot;.\n\n* **string** reply.name - The name. --! Only if the reply is a PID.\n\n* **string** reply.mode - The mode of the PID. --! Only if the reply is a PID.\n\n* **string** reply.pid - The PID. --! Only if the reply is a PID.\n\n#### connect()\n\nConnect/Open the serial port and add events to serialport. Also starts the intervalWriter that is used to write the queue.\n\n#### disconnect()\n\nDisconnects/closes the port.\n\n#### write(message, replies)\n\nWrites a message to the port. (Queued!) All write functions call this function.\n\n##### Params:\n\n* **string** *message* The PID or AT Command you want to send. Without \\r or \\n!\n* **number** *replies* The number of replies that are expected. Default = 0. 0 --> infinite\n\n#### requestValueByName(name)\n\nWrites a PID value by entering a pid supported name.\n\n##### Params:\n\n* **string** *name* Look into obdInfo.js for all PIDS.\n\n#### addPoller(name)\n\nAdds a poller to the poller-array.\n\n##### Params:\n\n* **string** *name* Name of the poller you want to add.\n\n#### removePoller(name)\n\nRemoves an poller.\n\n##### Params:\n\n* **string** *name* Name of the poller you want to remove.\n\n#### removeAllPollers()\n\nRemoves all pollers.\n\n#### writePollers()\n\nWrites all active pollers.\n\n#### startPolling()\n\nStarts polling. Lower interval than activePollers * 50 will probably give buffer overflows.\n\n##### Params:\n\n* **number** *interval* Frequency how often all variables should be polled. (in ms) If no value is given, then for each activePoller 75ms will be added.\n\n#### stopPolling()\n\nStops polling.\n\n# LICENSE\n\nThis module is available under a [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0.html), see also the [LICENSE file](https://raw.github.com/EricSmekens/node-serial-obd/master/LICENSE) for details.",
  "_id": "serial-obd@0.1.0",
  "_from": "serial-obd@>=0.1.x"
}
